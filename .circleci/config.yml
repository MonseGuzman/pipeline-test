# version: 2.1
# jobs:
#   build:
#     docker: 
#       - image: circleci/cci-demo-docker-primary:0.0.2 # the primary container, where your job's commands are run
#     steps:
#       - run:
#           name: Test variables
#           command: | 
#            echo $test
      #Â - checkout # check out the code in the project directory
      # - run:
      #     name: Install Docker Compose
      #     command: |
      #       set -x
      #       curl -L https://github.com/docker/compose/releases/download/1.25.3/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
      #       chmod +x /usr/local/bin/docker-compose
      # - setup_remote_docker
      # - run: echo chmod +x script.sh && ./script.sh # run the `echo` command
      # - run:
      #     name: Build and push Docker image
      #     command: |
      #       TAG="0.1.${CIRCLE_BUILD_NUM}"
      #       docker build -t circleci/cci-demo-docker:$TAG .
      #       docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      #       docker push circleci/cci-demo-docker:$TAG



# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
version: 2.1
description: "Orb to generate a version number from the git history"

examples:
  basic_commands:
    description: |
      Generate a version number from the git ref
    usage:
      version: 2.1
      orbs:
        docsync: streamroot/versioning@1.0.0
      jobs:
        build:
          docker:
            - image: alpine/git
          steps:
            - checkout
            - versioning/generate

commands:
  generate:
    parameters:
      rc_branch:
        description: |
          Regex to determine release candidate branches
        type: string
        default: ^master$

    steps:
      - run:
          name: "Add `VERSION` environment variable to `BASH_ENV`"
          command: |
            VERSION=$CIRCLE_TAG
            if [ -z "$VERSION" ]; then
              SHA="$(git rev-parse --short HEAD)"

              VERSION="$(git describe --tags `git rev-list --tags --max-count=1` || true)"
              VERSION=${VERSION:-'0.0.0'}
              MAJOR="${VERSION%%.*}"; VERSION="${VERSION#*.}"
              MINOR="${VERSION%%.*}"; VERSION="${VERSION#*.}"
              PATCH="${VERSION%%.*}"; VERSION="${VERSION#*.}"

              if [[ "$CIRCLE_BRANCH" =~ <<parameters.rc_branch>> ]]; then
                VERSION="$MAJOR.$((MINOR+1)).0-rc-$SHA"
              else
                VERSION="$MAJOR.$((MINOR+1)).0-beta-$SHA"
              fi
            fi
            echo "export VERSION=$VERSION" >> $BASH_ENV